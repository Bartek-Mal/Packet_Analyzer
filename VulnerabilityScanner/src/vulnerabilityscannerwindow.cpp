// vulnerabilityscannerwindow.cpp

#include "vulnerabilityscannerwindow.h"

#include <QTabWidget>
#include <QVBoxLayout>
#include <QHBoxLayout>
#include <QLabel>
#include <QLineEdit>
#include <QPushButton>
#include <QTableView>
#include <QPlainTextEdit>
#include <QTextEdit>
#include <QStandardItemModel>
#include <QFileDialog>
#include <QProcess>
#include <QDebug>
#include <QDir>
#include <QFileInfo>
#include <QMessageBox>
#include <QDesktopServices>
#include <QUrl>
#include <QStandardPaths>
#include <QFile>

VulnerabilityScannerWindow::VulnerabilityScannerWindow(QWidget *parent)
    : QMainWindow(parent)
{
    tabs = new QTabWidget(this);

    // --- SQL Injection tab ---
    sqlTab = new QWidget;
    {
        auto *lay = new QVBoxLayout(sqlTab);
        lay->setSpacing(8);

        lay->addWidget(new QLabel(tr("Target URL:")));
        sqlUrlEdit = new QLineEdit(tr("http://example.com/page?id=1"));
        lay->addWidget(sqlUrlEdit);

        lay->addWidget(new QLabel(tr("Parameters (comma-separated):")));
        sqlParamsEdit = new QLineEdit(tr("id,name,age"));
        lay->addWidget(sqlParamsEdit);

        sqlRunBtn = new QPushButton(tr("Run SQL Injection Scan"));
        lay->addWidget(sqlRunBtn);
        connect(sqlRunBtn, &QPushButton::clicked,
                this, &VulnerabilityScannerWindow::runSqlScan);

        sqlResultsView = new QTableView;
        lay->addWidget(sqlResultsView, 1);

        auto *model = new QStandardItemModel(0, 4, this);
        model->setHeaderData(0, Qt::Horizontal, "Payload");
        model->setHeaderData(1, Qt::Horizontal, "Parameter");
        model->setHeaderData(2, Qt::Horizontal, "Status");
        model->setHeaderData(3, Qt::Horizontal, "Evidence");
        sqlResultsView->setModel(model);
    }
    tabs->addTab(sqlTab, tr("SQL Injection"));

    // --- XSS tab ---
    xssTab = new QWidget;
    {
        auto *lay = new QVBoxLayout(xssTab);
        lay->setSpacing(8);

        lay->addWidget(new QLabel(tr("Target URL:")));
        xssUrlEdit = new QLineEdit(tr("http://example.com/search?q=test"));
        lay->addWidget(xssUrlEdit);

        lay->addWidget(new QLabel(tr("Form parameters (comma-separated):")));
        xssParamEdit = new QLineEdit(tr("q,username,comment"));
        lay->addWidget(xssParamEdit);

        xssRunBtn = new QPushButton(tr("Run XSS Scan"));
        lay->addWidget(xssRunBtn);
        connect(xssRunBtn, &QPushButton::clicked,
                this, &VulnerabilityScannerWindow::runXssScan);

        xssResultsView = new QTableView;
        lay->addWidget(xssResultsView, 1);

        auto *model = new QStandardItemModel(0, 4, this);
        model->setHeaderData(0, Qt::Horizontal, "Payload");
        model->setHeaderData(1, Qt::Horizontal, "Field");
        model->setHeaderData(2, Qt::Horizontal, "Reflected");
        model->setHeaderData(3, Qt::Horizontal, "Details");
        xssResultsView->setModel(model);
    }
    tabs->addTab(xssTab, tr("XSS"));

    // --- SSTI tab ---
    sstiTab = new QWidget;
    {
        auto *lay = new QVBoxLayout(sstiTab);
        lay->setSpacing(8);

        lay->addWidget(new QLabel(tr("Target URL:")));
        sstiUrlEdit = new QLineEdit(tr("http://example.com/template"));
        lay->addWidget(sstiUrlEdit);

        lay->addWidget(new QLabel(tr("Payload / Expression:")));
        sstiPayloadEdit = new QLineEdit(tr("{{7*7}}"));
        lay->addWidget(sstiPayloadEdit);

        sstiRunBtn = new QPushButton(tr("Run SSTI Scan"));
        lay->addWidget(sstiRunBtn);
        connect(sstiRunBtn, &QPushButton::clicked,
                this, &VulnerabilityScannerWindow::runSstiScan);

        sstiOutput = new QPlainTextEdit;
        sstiOutput->setReadOnly(true);
        lay->addWidget(sstiOutput, 1);
    }
    tabs->addTab(sstiTab, tr("SSTI"));

    // --- Custom scripts tab ---
    customTab = new QWidget;
    {
        auto *lay = new QVBoxLayout(customTab);
        lay->setSpacing(8);

        lay->addWidget(new QLabel(tr("Custom script (Python, etc):")));
        auto *h = new QHBoxLayout;
        customScriptEdit = new QLineEdit;
        customBrowseBtn = new QPushButton(tr("Browse…"));
        customBrowseBtn->setFixedWidth(80);
        h->addWidget(customScriptEdit);
        h->addWidget(customBrowseBtn);
        lay->addLayout(h);
        connect(customBrowseBtn, &QPushButton::clicked,
                this, &VulnerabilityScannerWindow::browseCustomScript);

        customRunBtn = new QPushButton(tr("Run Custom Scan"));
        lay->addWidget(customRunBtn);
        connect(customRunBtn, &QPushButton::clicked,
                this, &VulnerabilityScannerWindow::runCustomScan);

        customOutput = new QPlainTextEdit;
        customOutput->setReadOnly(true);
        lay->addWidget(customOutput, 1);
    }
    tabs->addTab(customTab, tr("Custom"));

    // --- Proxy control tab ---
    proxyTab = new QWidget;
    {
        auto *lay = new QVBoxLayout(proxyTab);
        proxyStartBtn = new QPushButton(tr("Start Proxy Scanner"));
        proxyLogView   = new QTextEdit;
        proxyLogView->setReadOnly(true);
        lay->addWidget(proxyStartBtn);
        lay->addWidget(proxyLogView, 1);

        connect(proxyStartBtn, &QPushButton::clicked,
                this, &VulnerabilityScannerWindow::startProxyScanner);
    }
    tabs->addTab(proxyTab, tr("Proxy"));

    setCentralWidget(tabs);
    setWindowTitle(tr("Vulnerability Scanner"));
    resize(900, 650);
}

// --- placeholder slots ---

void VulnerabilityScannerWindow::runSqlScan()
{
    auto *model = qobject_cast<QStandardItemModel*>(sqlResultsView->model());
    model->removeRows(0, model->rowCount());
    QList<QStringList> data = {
        {"' OR '1'='1", "id", "VULNERABLE", "Returned all rows"},
        {"' UNION SELECT user,pass --", "name", "VULNERABLE", "Error reveals columns"}
    };
    for (auto &row : data) {
        QList<QStandardItem*> items;
        for (auto &cell : row)
            items.append(new QStandardItem(cell));
        model->appendRow(items);
    }
}

void VulnerabilityScannerWindow::runXssScan()
{
    auto *model = qobject_cast<QStandardItemModel*>(xssResultsView->model());
    model->removeRows(0, model->rowCount());
    QList<QStringList> data = {
        {"<script>alert(1)</script>", "q", "Yes", "Reflected"},
        {"\"><img src=x onerror=alert(2)>", "comment", "No", "-"}
    };
    for (auto &row : data) {
        QList<QStandardItem*> items;
        for (auto &cell : row)
            items.append(new QStandardItem(cell));
        model->appendRow(items);
    }
}

void VulnerabilityScannerWindow::runSstiScan()
{
    sstiOutput->clear();
    sstiOutput->appendPlainText("Sending payload: " + sstiPayloadEdit->text());
    sstiOutput->appendPlainText("Response contained: 49");
    sstiOutput->appendPlainText("-> SSTI detected!");
}

void VulnerabilityScannerWindow::runCustomScan()
{
    customOutput->clear();
    customOutput->appendPlainText("Would run: " + customScriptEdit->text());
    customOutput->appendPlainText("Output will appear here.");
}

void VulnerabilityScannerWindow::browseCustomScript()
{
    QString file = QFileDialog::getOpenFileName(
        this, tr("Select script"), QString(),
        tr("Scripts (*.py *.sh *.js);;All Files (*)"));
    if (!file.isEmpty())
        customScriptEdit->setText(file);
}

void VulnerabilityScannerWindow::startProxyScanner()
{
    // stop if already running
    if (proxyProcess && proxyProcess->state() != QProcess::NotRunning) {
        proxyProcess->kill();
        proxyProcess->deleteLater();
        proxyProcess = nullptr;
        proxyStartBtn->setText(tr("Start Proxy Scanner"));
        proxyLogView->append(tr("[proxy] stopped"));
        return;
    }

    // try headless mitmdump first, otherwise mitmproxy -q
    bool useMitmProxy = false;
    QString mitmExec = QStandardPaths::findExecutable("mitmdump");
    if (mitmExec.isEmpty()) {
        mitmExec = QStandardPaths::findExecutable("mitmproxy");
        useMitmProxy = true;
    }
    if (mitmExec.isEmpty()) {
        QMessageBox::critical(this, tr("Error"),
            tr("Cannot find mitmdump or mitmproxy on your PATH."));
        return;
    }

    // resolve script path
    QString appDir = QCoreApplication::applicationDirPath();
    QString script = QDir(appDir)
        .absoluteFilePath("../VulnerabilityScanner/backend/mitm_inject.py");
    if (!QFile::exists(script)) {
        QMessageBox::critical(this, tr("Error"),
            tr("Injector script not found:\n%1").arg(script));
        return;
    }

    // debug info
    qDebug() << "[proxy] binary:" << mitmExec;
    qDebug() << "[proxy] script exists? " << QFile::exists(script);

    // prepare process
    proxyProcess = new QProcess(this);
    proxyProcess->setWorkingDirectory(QFileInfo(script).path());
    proxyProcess->setProcessChannelMode(QProcess::MergedChannels);

    connect(proxyProcess, &QProcess::readyReadStandardOutput, this, [&](){
        QString out = QString::fromUtf8(proxyProcess->readAllStandardOutput());
        proxyLogView->moveCursor(QTextCursor::End);
        proxyLogView->insertPlainText(out);
        proxyLogView->moveCursor(QTextCursor::End);
    });
    connect(proxyProcess, &QProcess::errorOccurred, this, [&](QProcess::ProcessError){
        proxyLogView->append(tr("[proxy] process error"));
    });
    connect(proxyProcess, QOverload<int,QProcess::ExitStatus>::of(&QProcess::finished),
            this, [&](int c, QProcess::ExitStatus){
        proxyLogView->append(tr("[proxy] exited %1").arg(c));
        proxyStartBtn->setText(tr("Start Proxy Scanner"));
    });

    // build args
    QStringList args;
    args << "--listen-port" << "8080";
    if (useMitmProxy) {
        args << "-q";
    }
    args << "-s" << script;

    proxyStartBtn->setText(tr("Stop Proxy Scanner"));
    proxyLogView->append(tr("[proxy] starting…"));

    // start and wait a bit
    proxyProcess->start(mitmExec, args);
    if (!proxyProcess->waitForStarted(3000)) {
        QMessageBox::critical(this, tr("Proxy failed to start"),
                              proxyProcess->errorString());
        proxyProcess->deleteLater();
        proxyProcess = nullptr;
        proxyStartBtn->setText(tr("Start Proxy Scanner"));
        return;
    }

    // open CA install page
    QDesktopServices::openUrl(QUrl("http://127.0.0.1:8080/"));
    proxyLogView->append(
        tr("[proxy] please visit http://127.0.0.1:8080/ to install the CA certificate"));
}
